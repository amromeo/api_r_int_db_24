---
title: "REDCap and R"
format: html
editor: visual
---

## Downloading data with REDCapR

The following two code chunks will use the **REDCapR** package to connect to a REDCap database and download its data into an object called `my_redcap_data`. Run the code chunks.

```{r}
library(REDCapR)

creds <- retrieve_credential_local("../data-private/credentials.csv", 1)

uri <- creds$redcap_uri
token <- creds$token
```

```{r}
my_redcap_data <- redcap_read_oneshot(uri, token)$data
```

When this runs successfully, it will give you a message that [looks like an error]{style="color:red"} but is really just a status message. The HTTP status code "200" means "success."

So if this ran without an error, pat yourself on the back! You just used R to access the REDCap API via REDCapR and downloaded a project into the data frame named `my_redcap_data`. Pretty cool!

![](https://png.pngtree.com/png-vector/20220612/ourmid/pngtree-stop-here-halt-end-stoppage-vector-png-image_13876140.png){style="display: block; margin-left: auto; margin-right: auto" width="218"}

## Extracting Data from REDCap using REDCapTidieR

In this exercise, we will download REDCap data using **REDCapTidier** (as opposed to **REDCapR**) and then explore that data using the Posit IDE. Run the code chunk below and examine the resulting `redcart` object. Note that is a data frame (or **tibble**) with 18 rows.

```{r}
library(REDCapTidieR)

# Load credentials from CSV file
creds <- REDCapR::retrieve_credential_local("../data-private/credentials.csv", 1)

uri <- creds$redcap_uri
token <- creds$token

# Read the CAR-T cell REDCap data into an object named "redcart"
redcart <- read_redcap(uri, token)

# Show me redcart!
redcart
```

## Exploring the REDCapTidieR Supertibble

Take a look at the *Environment* pane to the right. Note that there is an object named `redcart`. This is the **supertibble** you just created inside of R's memory. (If you don't see `redcart`, try running the code chunk above again).

A **tibble** (or **data frame**) is a tabular data structure with rows and columns, similar to a SQL database or an Excel sheet. A **supertibble** is a tibble that contains tibbles. This is a special data structure that is useful to represent a REDCap project.

Look again at the *Environment* pane. On the far right next to `redcart`, you will spot an small icon that looks like a table. Click on it to make the *Data Viewer* appear.

The *Data Viewer* is a handy way to explore tibbles built into the Posit IDE.

Go ahead an explore `redcart` to confirm the following features of the supertibble:

1.  Each row represents a REDCap instrument.
2.  In addition to the instrument's name, useful instrument-level metadata is shown here.
3.  The `redcap_data` column contains tibbles (note the little table icons!)
4.  By clicking on a tibble object inside the `redcap_data` column you can *drill down* and view the data collected from a specific REDCap instrument.

Without writing any code, just by working in the *Data Viewer*, try to answer the following questions:

1.  How many instruments are in the `redcart` database?

2.  How many rows are in the `adverse_events` table?

3.  Is the `medical_history` instrument repeating or nonrepeating? How can you tell? Why would it be designed this way?

4.  Drill down into the `demographics` instrument. How many patients are captured in here? Who is the oldest patient on the trial?

> **NOTE: Studies have shown that explaining material you just learned to others can boost memory. So if you're done early, you might want to get up and help out others! :)**

## Extracting a Tibble from the Supertibble

You can easily extract a single data frame or tibble from the supertibble using the `extract_tibble()` function. For example, to pull out the `demographics` tibble, you might write:

```{r}
demographics <- redcart |>
  extract_tibble("demographics")
```

Run the code chunk above and confirm that there is now a `demographics` object in the Environment that contains the demographics of the patients on the REDCART trial.

Note that REDCapTidieR is built to support tidyverse-style data pipelines with the pipe operator (both the "old" `%>%` and the "new" `|>` pipe work).

Click on the `demographics` table in the Environment pane to explore it in the Data Viewer and note that it is a regular tibble or data frame and contains the demographics data you'd be interested in in an easy to use format.

## Adding Summary Statistics

REDCapTidieR makes is super easy to attach various kinds of summary statistics to the data captured in a REDCap project using the **skimr** package. The `add_skimr_metadata()` function computes summary statistics for each variable in the project and adds them to the **metadata** tibbles (i.e. the tibbles in the `redcap_metadata` column of the supertibble).

Summary statistics that skimr calculates depend on the data type (numeric, character, Date, etc.) and include, among others:

-   Missing value count and complete rate

-   Number of unique entries

-   Minimum, maximum, mean, standard deviation, and 25th/75th percentiles

-   A rough histogram of numeric data

Complete the code chunk below by piping the `redcart` supertibble into the `add_skimr_metadata()` function and run it.

```{r}
redcart <- redcart |>
  ________()
```

Explore the **metadata** tibble of the `demographics` instrument to answer the following questions:

1.  What is the average age of study participants? Standard deviation?
2.  In the `hematology` table, which blood counts are approximately normally distributed? Which ones aren't?

## Adding Variable Labels

REDCapTidieR integrates with the [labelled](http://127.0.0.1:46591/help/library/REDCapTidieR/doc/glossary.html#labelled) package to allow you to attach **variable labels** to the supertibble. What's a *variable label*? A variable label is simply a short piece of descriptive text that describes the meaning of the variable or column of a data frame or tibble.

The `make_labelled()` function takes a supertibble and returns a supertibble with [variable labels](http://127.0.0.1:46591/help/library/REDCapTidieR/doc/glossary.html#variable-label) applied to the [variables](http://127.0.0.1:46591/help/library/REDCapTidieR/doc/glossary.html#variable) of the supertibble as well as to the variables of all data and metadata tibbles in the `redcap_data` and `redcap_metadata` columns of the supertibble, and even to the skimr metadata - essentially it applies variable labels to everything it can.

To complete the following exercise, we'll start from scratch:

1.  Download the REDCART project and store it in a supertibble named `redcart`.
2.  Then apply skimr metadata.
3.  Finally, apply variable labels.

```{r}
redcart <- _______(uri, token) |>
  _____________() |>
  _____________()
```

Explore `redcart` in the Data Viewer. Note that the Posit IDE supports labels! Drill down into the `demographics` table and note the variable labels there. Can you guess how REDCapTidieR generates variable labels for fields? **REDCapTidieR pulls variable labels from the REDCap field labels (data entry prompts).**

## Exporting to Excel

REDCapTidieR provides the `write_redcap_xlsx()` function to export a REDCap project supertibble into Excel. This function has two arguments. The first is the supertibble to export and the second is the name of the Excel file to be written.

In the code chunk below, write code to export the `redcart` supertibble to a file named `redcart.xlsx`. The run the chunk.

```{r}

```

Can you see the Excel file in the Files pane? Click on it and choose "View File" to open it. Note: this assumes you have Excel installed on your computer.

Note that the Excel file has multiple sheets. By default, the first sheet is the Table of Contents. Each additional sheet contains data from a specific instrument. All metadata (including skimr metadata, if available) goes into the last sheet.
