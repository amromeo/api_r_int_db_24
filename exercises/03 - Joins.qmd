---
title: "Joins"
format: html
editor: visual
editor_options: 
  chunk_output_type: inline
---

## Need for Joins

```{r}
library(tidyverse)
library(DBI)
library(RSQLite)
library(connections)

con <- dbConnect(RSQLite::SQLite(), "/cloud/project/mimic4.db")
# con <- dbConnect(RSQLite::SQLite(), dbname = "mimic_database.sqlite")

connection_view(con)  # Remove if we are not pursuing the connections pane
```


```{r}
# This is really more appriorpiate for patrick's talk i think

dbListTables(conn = con)

dbListFields(con,"LABEVENTS")

labevents <- dbReadTable(con, "LABEVENTS")

```

## Set up need for joins

Question: What is the most commonly ordered lab?

```{r}
# Without Joins
db_lab_events <- tbl(con, "LABEVENTS")
db_lab_items <- tbl(con, "D_LABITEMS")
# Will they be familiar with this table at this point? if no may need to look at table, fields, etc.
```

```{r}
top_itemid <- db_lab_events |> 
  count(itemid) |>
  slice_max(n) |>
  pull(itemid)

top_itemid
```


```{r}
lab_items |>
  filter(itemid == top_itemid)
```

But what if you wanted to do all the labs.....

## Joins

Joins are a way to merge data, in particular tabular data like data frames. There are a large number of join types that are variably used depending on what you are trying to accomplish. 

### Left Joins

Imagine you're the director of a pathology residency program, and you're setting up a new mentorship initiative. The goal is simple: pair senior residents with junior residents to provide guidance and support. To start, you create two lists. The first list contains the names of junior residents in need of mentorship. The second list is made up of senior residents who have volunteered to be mentors.

Now, the challenge is to effectively pair these two groups. To do this, you decide to use a straightforward method: number both lists starting from 1. Each junior resident with a number (say, 3) will be paired with the senior resident who also has the same number (3 in this case).

The process of matching the pairs of residents is a real-life "join". But depending on the number of residents in each list and how you want the mentorship program to work you'll use a different matching process, or join.

Let's say you have 3 junior residents and 5 senior resident volunteers. Your lists may look something like this:


(Alternatively)

```{r results='asis', echo=FALSE}
library(knitr)
library(kableExtra)

# Data for junior and senior residents
seniorResidents_ex1 <- tibble(
  Assignment = 1:5,
  `Senior Resident` = c("Alex Johnson", "Jamie Smith", "Taylor Brown", "Jordan Garcia", "Morgan Robinson")
)
juniorResidents_ex1<- tibble(
  Assignment = 1:3,
  `Junior Resident` = c("Chris Lee", "Jordan Patel", "Alex Rivera")
)
```


```{r results='asis', echo=FALSE}
# Define colors for each specific Assignment
color_mapping <- setNames(c("#FFB6C1", "#ADD8E6", "#90EE90", "#FFD700", "#FFA07A"),
                          c(1, 2, 3, 4, 5))

# Function to apply colors to all columns
color_cells <- function(data) {
  data %>%
    rowwise() %>%
    mutate(across(everything(), ~cell_spec(., "html", background = color_mapping[as.character(Assignment)])))
}

# Apply colors and convert to HTML tables
juniorTable_ex1 <- juniorResidents_ex1 %>%
  color_cells() %>%
  kable("html", escape = F) %>%
  kable_styling(full_width = F, position = "left")

seniorTable_ex1 <- seniorResidents_ex1 %>%
  color_cells() %>%
  kable("html", escape = F) %>%
  kable_styling(full_width = F, position = "right")

# Output the tables
(juniorTable_ex1)
(seniorTable_ex1)
```

We need a new list that has the junior resident and their assigned senior resident. We want to (1) ensure that all the junior residents appear in the final list. Next to their name should be their assigned senior resident. (2) If there are more senior resident volunteers than junior trainees, we don't need them in the final list.

REWRITE THIS
A left join will accomplish this task. In a left join, every junior resident from our first list is included. This means all junior residents will be on the final list, with their corresponding senior residents next to them if available. If a junior resident doesn't have a matching senior (because there are fewer seniors than juniors), the senior's information will be left blank or marked as 'NA' (not available) in the combined list. This method ensures that every junior resident is accounted for (1), and no senior resident is included unless they have a junior to mentor (2), perfectly aligning with our mentorship program's objective to prioritize junior resident mentorship opportunities.

```{r}
# Perform a left join
joinedData_ex1 <- left_join(juniorResidents_ex1, seniorResidents_ex1, by = "Assignment")

# View the result
joinedData_ex1 |>
  color_cells() %>%
  kable("html", escape = F)
```

Say we changed the rules of the mentorship program slightly. Let's say we actually want to provide all of our senior residents with an opportuniy to be a mentor. How can we accomplish this?

First we need to modify our lists slightly:

```{r results='asis', echo=FALSE}
# Data for junior and senior residents
seniorResidents_ex2 <- tibble(
  Assignment = c(1:3,1:2),
  `Senior Resident` = seniorResidents_ex1$`Senior Resident`
)

juniorResidents_ex2 <- juniorResidents_ex1 # Use same resident list as example 1

# Apply colors and convert to HTML tables
juniorTable_ex2 <- juniorResidents_ex2 %>%
  color_cells() %>%
  kable("html", escape = F) %>%
  kable_styling(full_width = F, position = "left")

seniorTable_ex2 <- seniorResidents_ex2 %>%
  color_cells() %>%
  kable("html", escape = F) %>%
  kable_styling(full_width = F, position = "right")

# Output the tables
(juniorTable_ex2)
(seniorTable_ex2)
```

And when we join the two lists it looks like this:

```{r results='asis', echo=FALSE}
# Perform a left join
joinedData_ex2 <- left_join(juniorResidents_ex2, seniorResidents_ex2, by = "Assignment")

# View the result
joinedData_ex2 |>
  color_cells() %>%
  kable("html", escape = F)
```

Let's abstract what we've learned from here. If there are multiple matches to be had in a join then you wind up with duplicated rows. In this case, the junior residents are duplicated because they are matched up with multiple senior residents.

Let's say you have more first years than senior volunteers, what would that look like? Let's see.

```{r results='asis', echo=FALSE}
# Data for junior and senior residents
seniorResidents_ex3 <- tibble(
  Assignment = 1:3,
  `Senior Resident` = c("Alex Johnson", "Jamie Smith", "Taylor Brown")
)
juniorResidents_ex3 <- tibble(
  Assignment = 1:5,
  `Junior Resident` = c("Chris Lee", "Jordan Patel", "Alex Rivera", "Riley Davis", "Sam Kim")
)

# Apply colors and convert to HTML tables
juniorTable_ex3 <- juniorResidents_ex3 %>%
  color_cells() %>%
  kable("html", escape = F) %>%
  kable_styling(full_width = F, position = "left")

seniorTable_ex3 <- seniorResidents_ex3 %>%
  color_cells() %>%
  kable("html", escape = F) %>%
  kable_styling(full_width = F, position = "right")

# Output the tables
(juniorTable_ex3)
(seniorTable_ex3)
```

And the join would look like this:

```{r}
# Perform a left join
joinedData_ex3 <- left_join(juniorResidents_ex3, seniorResidents_ex3, by = "Assignment")

# View the result
joinedData_ex3 |>
  color_cells() %>%
  kable("html", escape = F)
```

Note that given requirements 1 and 2 above, even if we have more first year's than senior residents, the left join is still able to provide us with the intended output, a list with all the first years and their matching senior residents.

Let's say we alter the requirements slightly. We want to ensure that all junior residents have a matching senior resident. How would we accomplish this?

Assuming there are fewer senior residents than junior ones what we can do is assign the same senior resident to multiple junior residents. In this case we would have to repeat assignment numbers, like this:

```{r results='asis', echo=FALSE}
# Data for junior and senior residents
seniorResidents_ex4 <- seniorResidents_ex3  
  
juniorResidents_ex4 <- tibble(
  Assignment = c(1:3,1:2),
  `Junior Resident` = c("Chris Lee", "Jordan Patel", "Alex Rivera", "Riley Davis", "Sam Kim")
)

# Apply colors and convert to HTML tables
juniorTable_ex4 <- juniorResidents_ex4 %>%
  color_cells() %>%
  kable("html", escape = F) %>%
  kable_styling(full_width = F, position = "left")

seniorTable_ex4 <- seniorResidents_ex4 %>%
  color_cells() %>%
  kable("html", escape = F) %>%
  kable_styling(full_width = F, position = "right")

# Output the tables
(juniorTable_ex4)
(seniorTable_ex4)
```

And now when we join, we get this:

```{r}
# Perform a left join
joinedData_ex4 <- left_join(juniorResidents_ex4, seniorResidents_ex4, by = "Assignment")

# View the result
joinedData_ex4 |>
  color_cells() %>%
  kable("html", escape = F)
```

#### To Summarize

-   Left joins include all records from the left table in the output.
-   When multiple matches exist (like multiple seniors for one junior or multiple juniors for seniors), left joins can result in duplicated rows.
-   In cases where the left table (juniors) has more entries than the right (seniors), left joins show 'NA' for unmatchable entries.

### Inner Joins

There are numerous types of joins that are supported by tidyverse but we'll only cover one other type, the inner join!

Imagine the following scenario. You are tasked with doing a quality project involving the evaluation of BRAF mutation status in samples from patients with melanoma. Since mutation positive patients are candidates for targeted therapies like BRAF inhibitors (e.g., vemurafenib, dabrafenib) it is important that these patients be screened for BRAF. Your project aims to determine the number of patients who have melanoma who are BRAF mutation positive and negative.

You are given two lists. One of surgical pathology cases over the past year that were found to have melanoma and one of molecular pathology BRAF tests performed in the past year. Your task is to match these up to determine

```{r}

# Set seed for reproducibility
set.seed(123)

# Define a vector of melanoma types
melanoma_types <- c("Superficial Spreading Melanoma", 
                    "Nodular Melanoma", 
                    "Lentigo Maligna Melanoma", 
                    "Acral Lentiginous Melanoma", 
                    "Desmoplastic Melanoma", 
                    "Ocular Melanoma",
                    "Plain Melanoma")

# Create a tibble for melanoma testing
melanoma_patients <- tibble(
  patient_id = sample(1:150, 100, replace = TRUE), 
  melanoma_dx = sample(melanoma_types, 100, replace = TRUE),  # Sample 100 melanoma diagnoses
  surgical_case_number = 1:100
)

# Create a tibble for BRAF testing
# Ensuring some overlap with melanoma patient IDs
braf_patients <- tibble(
  patient_id = sample(1:150, 100, replace = TRUE),
  braf_test_result = sample(c("Positive", "Negative", "Indeterminate"), 100, replace = TRUE)
)

# Display the first few rows of each tibble
head(melanoma_patients)
head(braf_patients)


```

#### Inner Joins

An inner join is particularly useful in scenarios where we want to find matches between two datasets. In our case, we want to identify patients who have both melanoma and a recorded BRAF mutation status. Unlike a left join, an inner join only includes rows that have matching data in both datasets. This means that patients who don't have a matching record in both melanoma_patients and braf_patients will not appear in our final list.

For your quality project, this is ideal. We're specifically interested in patients who have been tested for both melanoma and BRAF mutations.

Here's how we can perform an inner join with the given data:

```{r}
# Perform an inner join
matched_patients <- inner_join(melanoma_patients, braf_patients, by = "patient_id")

# View the result
matched_patients

```

This code will merge the two lists based on the patient_id column. Only patients who appear in both lists will be included in matched_patients.

Now let's inspect the results. We expected to get a new list with: 
- One row per patient listing their melanoma diagnosis and their BRAF mutation status. 
- Only patients that had both melanoma and BRAF mutation testing 
- No patients who do not have both melanoma and BRAF mutation testing

Is that what we got?

To evaluate whether the results from the inner join meet the expectations, we'll perform a series of checks on the matched_patients data. This will help verify that the final dataset indeed contains only those patients who have undergone both melanoma diagnosis and BRAF mutation testing, with each row representing a unique patient along with their respective test results.

#### Inspection and Analysis of matched_patients

```{r}
## 1. Are patients in the final list one per row
matched_patients |>
  count(patient_id) |>
  filter(n >1) 

```

WHy are there duplicates in the final output

```{r}
melanoma_patients |>
  count(patient_id) |>
  filter(n >1)
```


```{r}
braf_patients |>
  count(patient_id) |>
  filter(n >1) 
```

```{r}
matched_patients |>
  count(patient_id) |>
  filter(n >1) |>
  inner_join(matched_patients,., by="patient_id") |>
  filter(patient_id == 76)
```


R code to follow. You get the point.

#### To Summarize

-   Inner joins are best used when you need to match records across two datasets.
-   They help in isolating the subset of data that is common to both tables.
-   Unlike left joins, they do not include unmatched records.


```{r}
labs |>
  left_join(lab_items, by = "itemid") |>
  filter(label == "Chloride")
```


```{sql connection=con}
-- Assuming conn is your database connection
SELECT distinct field_name  
FROM poe_detail

```

```{sql connection=con}
SELECT * --distinct order_subtype  
FROM poe p 
left join poe_detail pd on pd.poe_id = p.poe_id
WHERE p.order_type like 'Lab'
LIMIT 100
```

```{sql connection=con}
SELECT * FROM your_table;
```

```{sql, connection = con,  output.var="results"}
SELECT *
FROM PROCEDURES_ICD p
JOIN CPTEVENTS c ON p.subject_id = c.subject_id AND p.hadm_id = c.hadm_id
JOIN D_ICD_PROCEDURES icd on icd.icd9_code = p.icd9_code
;


WHERE p.icd9_code IN ('<icd_code_for_lab_order1>', '<icd_code_for_lab_order2>')
   OR c.cpt_number IN ('<cpt_code_for_lab_order1>', '<cpt_code_for_lab_order2>')
ORDER BY p.subject_id, p.hadm_id;

```

```{r}
results |>
  distinct(short_title) |> 
  View()
```

```{r}
labs_df |>
  count(row_id) |>
  filter(n > 1)

labs_df |>
  count(subject_id,charttime,itemid) |>
  filter(n >1)

```

```{r}
labs_df |>
  inner_join(labs_itms_df, join_by(itemid))
```

```{r}
labs_full_df <- dbGetQuery(con,"
                           SELECT * 
                           FROM LABEVENTS
                           INNER JOIN D_LABITEMS on D_LABITEMS.itemid = LABEVENTS.itemid")
                           ")
```

```{r}

```
