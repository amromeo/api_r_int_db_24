---
title: "Joins"
format: html
editor: visual
editor_options: 
  chunk_output_type: inline
---

## Introduction

Run the setup chunk below to load the packages we need for the session.

```{r setup}
library(tidyverse)
library(DBI)
library(RSQLite)
library(connections)
```

Connect to the MIMIC IV database

```{r connect}
mimic <- dbConnect(drv = RSQLite::SQLite(), 
                 dbname = "../mimic4.db")

connection_view(mimic)  # Necessary to view SQLite database tables in the Connections pane
```

```{r con_tables}
labevents <- tbl(con, "LABEVENTS")
d_labitems <- tbl(con, "D_LABITEMS")
patients <- tbl(con, "PATIENTS")
```


#### Exercise 1a:

CAP is inspecting your lab and one of the inspectors asked your chair what your top performed test is.

Your chair surreptitiously texts you as he distracts the inspector with some free Nespresso……

Connect to the MIMIC IV database and answer:

**What the most commonly ordered lab test is in the database?**

*HINT: Analytic Strategy:*

1.  *Connect to the LABEVENTS table*

2.  *Count the number of rows per itemid*

3.  *Arrange from large to smallest count*

4.  *Top row is the winner!*

```{r exercise_1a}
## Review - Create a new table object *labevents* that connects to the labevents MIMIC-IV table.
labevents <- tbl(___, ______)

## Create a pipe that starts from labevents database table and determines which itemid was ordered most frequently (This exercise reviews an exercise from Lesson 2)
labevents |>

```

Based on the above you should have identified the lab order associated with itemid 50971 as the most frequently ordered test.

But what is that lab test?

You can determine this using the tools you already know.

1.  Find 50971 in the View pane for D_LABITEMS

2.  Connect to D_LABITEMS and use `filter` to 50971.

### Exercise 1b:

Use one of the strategies above to determine what the most frequently ordered lab test is.

**But what if you needed to know what the *top 100* test orders were?**

## Joins

Joins are a mechanism to merge together data from two different tables that contain related data. In our example the labevents table and the d_labitems tables are related. The former contains information about each lab order placed in the EHR. the d_labitems table has metadata about each of the kinds of lab orders that can be placed in the EMR. On a more concrete level, the 'itemid' columns in both tables hold matching values, which means that an 'itemid' in one table signifies the same lab order type as the same 'itemid' in the other table.

### Inner Join

An inner join:

-   Retains only rows that match in both tables.

-   Excludes rows without matches in both tables.

-   Combines columns from both tables.

```{r inner_join_template}

# left_join() functions in R are structured like this:
left_join(df1,df2,join_by(shared_column))

```

```{r}

```

```{r}
# Will they be familiar with this table at this point? if no may need to look at table, fields, etc.
```

```{r}
top_itemid <- db_lab_events |> 
  count(itemid) |>
  slice_max(n) |>
  pull(itemid)

top_itemid
```

```{r}
lab_items |>
  filter(itemid == top_itemid)
```

But what if you wanted to do all the labs.....

## Joins

Joins are a way to merge data, in particular tabular data like data frames. There are a large number of join types that are variably used depending on what you are trying to accomplish.

### Left Joins

```{r}
db_patients |>
  left_join(db_lab_events, join_by(subject_id)) |>
  filter(is.na(index.y))
  filter(is.na(dod)) |>
  collect()

```

### Inner Join

#### Your Turn 4

```{r}
db_lab_events <- tbl(con, "LABEVENTS")
db_lab_items <- tbl(con, "D_LABITEMS")
db_patients <- tbl(con, "PATIENTS")
db_diagnoses <- tbl(con,"DIAGNOSES_ICD")
```

```{r}
db_lab_events |>
  inner_join(db_lab_items,join_by(itemid)) |>
  filter(label == "Schistocytes") |>
  distinct(subject_id) |>
  inner_join(db_diagnoses, join_by(subject_id)) |>
  arrange(subject_id,icd_code) |>
  collect() |>
  View()
```

```{r}
db_lab_events |>
  inner_join(db_lab_items,join_by(itemid)) |>
  filter(label == "Schistocytes") |>
  arrange(subject_id) |>
  collect()
```

```{r}
db_diagnoses |>
  arrange(subject_id, icd_code) |>
  collect()
```
