---
title: "02 - Databases with R"
format: html
editor: visual
---

## Exercise 1: Setup

Run the setup chunk below to load the packages we need for a database connection. The DBI package provides functions to connect to and work with various types of databases. The RSQLite contains a specific driver to allow connections with SQLite databases, which are stored a single file.

```{r setup}
library(tidyverse)
library(DBI)
library(RSQLite)
```

## Connecting to Databases

The `dbConnect()` function in the DBI package allows you to create a connection object with the details of a specific database connection. Below we are creating a connection object *con* that utilizes the SQLite driver (expressed as the function `RSQLite::SQLite()`) to connect to a database stored in the file "file_name.db".

```{r}
# example code - not executable
con <- dbConnect(drv = RSQLite::SQLite(), # driver - type of SQL connection
                 dbname = “file_name.db”) # file (for SQLite or other file-based DBs)
```

There is a small sample SQLite database file "test_database.db" in the parent directory for this repository. We will create a connection object *con* that connects to the database in this file:

```{r}
con <- dbConnect(drv = RSQLite::SQLite(), 
                 dbname = "../test_database.db") 
```

The *con* connection object will be visible in your environment.

Connections to SQLite are straightforward because they are contained within a single file and do not require additional credentials or other technical connection details (e.g. a port). Review the DBI package documentation and vignettes to learn how to connect to other types of databases using different drivers.

Once connected you may want to see the tables within the database. You can use the `dbListTables()` function on the connection object to review this.

```{r}
dbListTables(conn = con)
```

For a given table within the database you can inspect the fields (i.e. variables or columns) using the `dbListFields()` and providing the connection object as one argument as well as the name of the table of interest (in quotes) as another argument.

```{r}
dbListFields(conn = con,
             name = "sample")
```

### Exercise 2: Connecting to the database and reviewing its structure

Connect to MIMIC database by building a connection object named "mimic" that connects to the SQLite database in the file mimic4.db. The file mimic4.db is not in the directory this file is in (exercises/) but it is available in the main directory for this project (hint: "../" can be used to point to the directory that is one level higher than the current directory, i.e. "../file_name"). After connecting, how can you confirm you are connected?

```{r}
mimic <- dbConnect(drv = RSQLite::SQLite(), 
                 dbname = "../mimic4.db")

```

List the tables in the mimic database.

```{r}
dbListTables(conn = mimic)
```

List the fields from *labevents* and *d_labitems* tables.

```{r}
dbListFields(mimic,"labevents")
dbListFields(mimic,"d_labitems")
```

##  Using the Connections Pane

RStudio provides additional tools to assist with reviewing the tables and fields available in your database. In the top left of your RStudio window, where the Environment tab appears, there is a Connections tab that can be used to initiate database connections manually. To maintain reproducibility we encourage scripting the creation of the connection object, but to take advantage of the Connections tab we can use the *connections* package. Below we load the connections package and use the `connection_view()` function on our connection object *con*. This should update your Connections tab so you can see a SQLiteConnection object. You can click on the blue arrow to the left of the SQLiteConnection and drill down to the table and field levels.

```{r}
library(connections)
connection_view(con)
```

When we are done working with databases we can use the `dbDisconnect()` function on the specific connection object of interest to close the database connection. The `connection_view()` function only supports a single connection at a time so let's go ahead and close the database connection to prep for the next exercise.

```{r}
dbDisconnect(con)
```

### Exercise 3: Viewing the database in the Connections tab

Let's use the Connections tab to navigate the mimic database. First, disconnect from the mimic database to clean the slate of connections.

```{r}
dbDisconnect(mimic)
```

Next reopen the connection to the mimic SQLite database (you can use the original code to establish the connection from Exercise 1). Then enable the view of the database in the Connections pane and use the pane to answer how many dimension tables are included in the database.

```{r}
mimic <- dbConnect(drv = RSQLite::SQLite(), 
                 dbname = "../mimic4.db")
connection_view(mimic)
```

## Working with Tables

Once you connect to a database you will likely want to access the data and analyze it as if it were one or more data frames. We use the `tbl()` function and provide a connection object and a table name (in quotes) to create a table object.

```{r}
# not executable
table_object <- tbl(connection_object, "table_name")
```

We can connect to the mimic database the *d_labitems* table:

```{r}
d_labitems <- tbl(mimic, "d_labitems")
```

Note that this table object now appears in your Environment. However when you click on it to display the object in the View window you do not see any raw data and see some information about the connection object instead. That is because the table object is not actually a data frame - it is just a connection to the table in the database. No data has been brought into the environment (yet).

We are able to use the `head()` function to visualize the first 10 observations/rows:

```{r}
head(d_labitems, 10)
```

### Select

```{r}
column_subset <- select(table_object, column_1, column_2)
```

### Filter

```{r}
row_subset <- filter(table_object, column_name == criteria)
```

### Exercise 3

Select + filter exercise

### Count

```{r}
group_count <- table_object |> 
  count(column_1, column_2)
```

### Exercise 4

Count number of patients from admissions table

## Memory Considerations

Data not pulled into memory until required

```{r}
retrieved_object <- table_object |> 
  collect()
```

Alternative mechanism for retrieving data

```{r}
labevents <- dbReadTable(con, "LABEVENTS")
```

```{r}
dbDisconnect(mimic)
```
